ORM система - Object Realtional Mapping

Создана для того чтобы удобно было создавать обьекты в Java привязанные к relational(!) базе данных

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>5.4.2.Final</version>
        </dependency>













Создание и инициализация


        StandardServiceRegistry registry = new StandardServiceRegistryBuilder()
                .configure("hibernate.cfg.xml").build();
        Metadata metadata = new MetadataSources(registry).getMetadataBuilder().build();
        SessionFactory sessionFactory = metadata.getSessionFactoryBuilder().build();
        
        Session session = sessionFactory.openSession();                                    - с этой переменной работаем

        // Здесь много кода

        sessionFactory.close();       // В конце обязательно закрыть соединение



Желательно создавать это все только 1 раз в коде





































Добавление строк, add row

        Session session = sessionFactory.openSession();       - это обязательно всегда, открытие и закрытие сессии(коннекта к БД)
        Transaction transaction = session.beginTransaction(); - отк коммит

        Course course = new Course();                         - создаем обьект который привязан к нашей БД и Hibernate аннотациями и через cfg файл
        course.setName("Лучший курс");                      
        course.setType(CourseType.DESIGN);                    - ОБЯЗАТЕЛЬНЫ для добавления: Not null, Primary key(если он не автоинкремент), Foreign keys(все которые есть в таблице)
        course.setTeacherId(1);

        session.save(course);                                 - сохраняем в БД обьект course

        transaction.commit();                                 - закрываем коммит
        sessionFactory.close();                               - закрываем коннект




































Удаление строк, delete row

        Session session = sessionFactory.openSession();       - это обязательно всегда, открытие и закрытие сессии(коннекта к БД)
        Transaction transaction = session.beginTransaction(); - транзакция это как коммит в Git, накапливает много и потом коммитится в БД, если 1 строка с ошибкой то все отмена



        Course course = session.get(Course.class, 50);        - выбираем строку по ID в таблице Courses(к которой привязан класс Course)
        session.delete(course);                               - удалаем где аргумент - это обьекта нашей строки


        
        transaction.commit();                                 - закрываем транзакцию
        sessionFactory.close();                               - закрываем коннект





































Обновления строк, update rows

        Session session = sessionFactory.openSession();       - это обязательно всегда, открытие и закрытие сессии(коннекта к БД)
        Transaction transaction = session.beginTransaction(); - отк коммит

        Course course = session.get(Course.class, 51);        - выбираем строку по ID в таблице Courses(к которой привязан класс Course)
        course.setName("Обновленный курс");
        course.setType(CourseType.PROGRAMMING);               - обновляем нужные данные
        course.setTeacherId(3);

        session.save(course);                                 - сохраняем в БД обьект course

        transaction.commit();                                 - закрываем коммит
        sessionFactory.close();                               - закрываем коннект


















































Связь ManyToOne, Many To One

@ManyToOne(cascade = CascadeType.ALL)               - основная аннотация

Проект (TESTER) Hibernate или (10.8 в Скиллбокс)










В классе Courses есть вторичный ключ на учителя, который ведет этот курс teacher_id, и чтобы нам получить ИМЯ(name) учителя, который ведет нужный нам курс нужно сделат вот так:





        Course course = session.get(Course.class, 1);             - выбрать нужынй курс
        int teacherId = course.getTeacherId();                    - найти id учителя который ведет этот курс и присвоить ему переменную

        Teacher teacher = session.get(Teacher.class, teacherId);  - выбрать учителя используя переменную id 
        System.out.println(teacher.getName());                    - и получить его имя из обьекта teacher





А теперь тоже самое только чеерез свзяь ManyToOne(много курсов на одного учителя)

Сначала редактировать поле teacher_id в классе Course:



    @Column(name = "teacher_id")         ---->      @ManyToOne(cascade = CascadeType.ALL)
    private int teacherId;                          private Teacher teacher;              - переменная именно класса Teacher 


И теперь можно получить тот же результат гораздо удобнее:



        Course course = session.get(Course.class, 1);           - также выбираем нужный курс
        String teacher_name = course.getTeacher().getName();    - выбираем курс, учителя этого курса, его имя и присваиваем переменную
        System.out.println(teacher_name);                       - получаем имя



То есть теперь наш метод getTeacher имеет доступ не только к ID а ко всему классу Teacher и его переменным, что позволяет работать с БД в Java как с обычными Java-обьектами и классами, которые зависят друг от друга и с ними очень удобно работать

















































HQL и Query bulider



        StandardServiceRegistry registry = new StandardServiceRegistryBuilder()
                .configure("hibernate.cfg.xml").build();
        Metadata metadata = new MetadataSources(registry).getMetadataBuilder().build();
        SessionFactory sessionFactory = metadata.getSessionFactoryBuilder().build();

        Session session = sessionFactory.openSession();                                - до сюда это стандартный код

        CriteriaBuilder builder = session.getCriteriaBuilder();
        CriteriaQuery<Course> query = builder.createQuery(Course.class);
        Root<Course> root = query.from(Course.class);
        query.select(root);
        List<Course> resultList = session.createQuery(query).getResultList();          - создание обычного List из Courses обьектов

        for(Course course : resultList){                                               - распечатать название каждого курса в табллице
            System.out.println(course.getName());
        }

        sessionFactory.close();                                                        - закрытие 


















HQL

Можно писать запросы и вот так

        String hql = "From " + Course.class.getSimpleName() + " where price > 120000"; - создаем запрос
        List<Course> resultList = session.createQuery(hql).getResultList();            - создаем лист

        for(Course course : resultList){                                               - распечатываем
            System.out.println(course.getName() + " - " + course.getPrice());
        }



























Ленивая загрузка, lazy loading

@ManyToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)

НЕ ЛЕНИВАЯ загрузка(то есть загружается все сразу) - это FetchType.EAGER



Когда мы создаем   List<Course> resultList = session.createQuery(query).getResultList(); - то при запросе к примеру вывести только имя курса, он запрашивает ещё и всех Teacher, потому что у нас таблица Course привязана к Teacher   @ManyToOne(cascade = CascadeType.ALL)  - а это сильно потребляет ресурсы, и загрузка длительная
                                                      private Teacher teacher;


Чтобы этого избежать нужно в аннотации @ManyToOne(или в другой связке) указать тип fetch = FetchType.LAZY

    @ManyToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Teacher teacher;
















































Where, Order By и Limit в Hibernate


        query.select(root).where(builder.greaterThan(root.<Integer>get("price"), 100000)) - здесь WHERE(всегда обращаемся сначала к builder)
        .orderBy(builder.desc(root.get("price")));                                        - здесь ORDER BY

        List<Course> resultList = session.createQuery(query).setMaxResults(5).getResultList();  - setMaxResults() это тоже самое что LIMIT







        StandardServiceRegistry registry = new StandardServiceRegistryBuilder()
                .configure("hibernate.cfg.xml").build();
        Metadata metadata = new MetadataSources(registry).getMetadataBuilder().build();
        SessionFactory sessionFactory = metadata.getSessionFactoryBuilder().build();           - то как выглядит весь код

        Session session = sessionFactory.openSession();

        CriteriaBuilder builder = session.getCriteriaBuilder();
        CriteriaQuery<Course> query = builder.createQuery(Course.class);
        Root<Course> root = query.from(Course.class);
        query.select(root).where(builder.greaterThan(root.<Integer>get("price"), 100000))
        .orderBy(builder.desc(root.get("price")));
        List<Course> resultList = session.createQuery(query).setMaxResults(5).getResultList();

        for(Course course : resultList){
            System.out.println(course.getName() + " - " + course.getPrice());
        }


        sessionFactory.close();
















































Составной ключ, Composite key

Класс составного ключа обязан:

быть public;
иметь публичный конструктор по умолчанию;
реализовывать собственные equals(), hashCode(), публичные геттеры и сеттеры;
имплементировать Serializable.




@Embeddable
public class PurchaseListCK implements Serializable {       - пример класса ключа

    @Column(name = "student_name")
    private String studentName;

    @Column(name = "course_name")
    private String courseName;

    public PurchaseListCK() {}






@Entity
@Table(name = "PurchaseList")                               - и вот сам класс 
public class PurchaseList implements Serializable {

    @EmbeddedId
    private PurchaseListCK purchaseListCK;

    private  int price;







































Heap, корзина, разное

Чтобы сделать значение, способным принимать NULL, пишем вот так:

    @Column(name = "students_count", nullable = true)  - вот нуллабл
    private Integer studentsCount;                     - чтобы принять NULL значение переменная должна быть референсом а не примитивом, поэтому пишем Integer
















